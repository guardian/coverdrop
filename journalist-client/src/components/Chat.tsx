import { useEffect, useRef, useState } from "react";
import { Message } from "../model/bindings/Message";
import {
  EuiButton,
  EuiFlexGroup,
  EuiFlexItem,
  EuiTextArea,
  useEuiTheme,
} from "@elastic/eui";
import {
  updateUserStatus,
  checkMessageLength,
  getChats,
  markAsRead,
  submitMessage,
  updateUserAliasAndDescription,
} from "../commands/chats";
import { useMessageStore } from "../state/messages";
import { useDraftStore } from "../state/drafts";
import { MessageStatus } from "./MessageStatus";
import { ToggleMuteModal } from "./ToggleMuteModal";
import { UserStatus } from "../model/bindings/UserStatus";
import { ChatHeader } from "./ChatHeader";
import { EditUserModal } from "./EditUserModal";
import { palette } from "../styles/palette";
import { sizes } from "../styles/sizes";

type ChatProps = {
  userAutogeneratedName: string;
  messages: Message[];
  userReplyKey: string;
  setCurrentUserReplyKey: (user: string | null) => void;
  currentUserStatus: UserStatus;
  userAlias: string | null;
  userDescription: string | null;
};

export const Chat = ({
  userAutogeneratedName,
  messages,
  userReplyKey,
  setCurrentUserReplyKey,
  currentUserStatus,
  userAlias: userAlias,
  userDescription,
}: ChatProps) => {
  const [messageFillRatio, setMessageFillRatio] = useState(0);
  const [currentMessageDraft, setCurrentMessageDraft] = useState("");
  const [isMuteModalVisible, setIsMuteModalVisible] = useState(false);
  const [isEditModalVisible, setIsEditModalVisible] = useState(false);
  const [draftUserAlias, setDraftUserAlias] = useState(userAlias || "");
  const [draftUserDescription, setDraftUserDescription] = useState(
    userDescription || "",
  );

  useEffect(() => {
    setDraftUserAlias(userAlias || "");
    setDraftUserDescription(userDescription || "");
  }, [userAlias, userDescription]);

  const closeMuteModal = (e?: React.MouseEvent | React.KeyboardEvent) => {
    setIsMuteModalVisible(false);
    return e;
  };

  const closeEditModal = (e?: React.MouseEvent | React.KeyboardEvent) => {
    setIsEditModalVisible(false);
    return e;
  };

  const messagesEndRef = useRef<HTMLDivElement>(null);
  const textareaRef = useRef<HTMLTextAreaElement>(null);

  const draftStore = useDraftStore();
  const messageStore = useMessageStore();

  const prevUserReplyKey = useRef<string | null>(null);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "instant" });
  };

  const { euiTheme } = useEuiTheme();
  const { size } = euiTheme;

  useEffect(() => {
    messages.forEach((m) => {
      if (
        m.type === "userToJournalistMessage" &&
        m.from === userReplyKey &&
        !m.read
      ) {
        markAsRead(m.id);
      }
    });

    if (userReplyKey !== prevUserReplyKey.current) {
      const draft = draftStore.drafts[userReplyKey] || "";
      setCurrentMessageDraft(draft);

      scrollToBottom();
    }

    prevUserReplyKey.current = userReplyKey;
  }, [userReplyKey, messages]);

  const adjustHeight = () => {
    const textarea = textareaRef.current;
    if (textarea !== null) {
      // Reset height to default.
      // Without this it doesn't shrink back when deleting lines
      textarea.style.height = "auto";
      // Clamp to 121px which is ~5 rows
      const targetHeight =
        textarea.scrollHeight < 121 ? textarea.scrollHeight : 121;
      textarea.style.height = `${targetHeight}px`;
    }
  };

  useEffect(() => {
    adjustHeight();
  }, [currentMessageDraft]);

  const submitMessageForm = async () => {
    try {
      await submitMessage(userReplyKey, currentMessageDraft);

      setCurrentMessageDraft("");
      draftStore.clearDraft(userReplyKey);
      setMessageFillRatio(0);

      const messages = await getChats();
      messageStore.setMessages(messages);
    } catch (e: unknown) {
      if (e instanceof Error) {
        console.error("Error submitting message:", e.message);
      } else {
        console.error("Error submitting message", e);
      }
    }
  };

  const handleUserStatusChange = async (
    e: React.MouseEvent<HTMLButtonElement, MouseEvent>,
  ) => {
    try {
      const newStatus = currentUserStatus === "ACTIVE" ? "MUTED" : "ACTIVE";
      await updateUserStatus(userReplyKey, newStatus);

      closeMuteModal(e);

      setCurrentUserReplyKey(null);

      const messages = await getChats();
      messageStore.setMessages(messages);
    } catch (e: unknown) {
      if (e instanceof Error) {
        console.error("Error handling user status change:", e.message);
      } else {
        console.error("Error handling user status change", e);
      }
    }
  };

  const handleEditUserChange = async (
    e: React.MouseEvent<HTMLButtonElement, MouseEvent>,
  ) => {
    try {
      await updateUserAliasAndDescription(
        userReplyKey,
        draftUserAlias,
        draftUserDescription,
      );

      closeEditModal(e);

      const messages = await getChats();
      messageStore.setMessages(messages);
    } catch (e: unknown) {
      if (e instanceof Error) {
        console.error("Error handling user status change:", e.message);
      } else {
        console.error("Error handling user status change", e);
      }
    }
  };

  return (
    <>
      <EuiFlexGroup direction="column">
        <ChatHeader
          userAlias={userAlias}
          userAutogeneratedName={userAutogeneratedName}
          userDescription={userDescription ? userDescription : ""}
          currentUserStatus={currentUserStatus}
          setIsMuteModalVisible={setIsMuteModalVisible}
          setIsEditModalVisible={setIsEditModalVisible}
        />

        {/* Chat messages */}
        <EuiFlexItem grow={true}>
          <EuiFlexGroup
            direction="column"
            style={{
              margin: size.m,
              height: "100%",
              overflowY: "auto", // Make messages scrollable
              paddingBottom: size.base, // Add some padding at the bottom
            }}
          >
            {messages
              .filter((m) => {
                if (m.type === "journalistToUserMessage") {
                  return m.to === userReplyKey;
                } else {
                  return m.from === userReplyKey;
                }
              })
              .map((m) => {
                const alignSelf =
                  m.type === "journalistToUserMessage" ? "end" : "start";
                const background =
                  m.type === "journalistToUserMessage"
                    ? palette("journalist-to-user-message-background")
                    : palette("user-to-journalist-message-background");
                const color =
                  m.type === "journalistToUserMessage"
                    ? palette("journalist-to-user-message-color")
                    : palette("user-to-journalist-message-color");
                const isSent =
                  m.type === "journalistToUserMessage" ? m.isSent : null;

                const messageId =
                  m.type === "journalistToUserMessage"
                    ? `j2u-${m.id}`
                    : `u2j-${m.id}`;

                return (
                  <EuiFlexItem
                    grow={false}
                    style={{
                      alignSelf,
                      marginBottom: `-${size.base}`,
                      maxWidth: "50%",
                    }}
                    key={messageId}
                  >
                    <div
                      style={{
                        whiteSpace: "pre-wrap",
                        alignSelf,
                        color,
                        background,
                        padding: size.m,
                        width: "fit-content",
                        minWidth: sizes.chatMessage.minWidth,
                        borderRadius: size.s,
                      }}
                    >
                      {m.message}
                    </div>
                    <div
                      style={{
                        alignSelf,
                        fontSize: size.m,
                        color: palette("message-status-color"),
                        marginTop: size.xs,
                      }}
                    >
                      <MessageStatus
                        isSent={isSent}
                        timestamp={
                          m.type === "journalistToUserMessage"
                            ? m.sentAt
                            : m.receivedAt
                        }
                      />
                    </div>
                  </EuiFlexItem>
                );
              })}
            <div ref={messagesEndRef} />
          </EuiFlexGroup>
        </EuiFlexItem>

        {/* Send message form */}
        <EuiFlexItem grow={false} style={{ position: "sticky", bottom: 0 }}>
          <EuiFlexGroup
            style={{
              background: palette("message-sending-form-background"),
              padding: size.m,
            }}
          >
            <div
              style={{
                position: "relative",
                width: "100%",
                overflow: "hidden",
              }}
            >
              <EuiTextArea
                inputRef={textareaRef}
                style={{
                  // @ts-expect-error Hide the focus colour provided by EUI
                  "--euiFormControlStateColor": "transparent",
                  marginBottom: size.xxs, // Progress bar margin
                  paddingBottom: size.xs,
                  minHeight: sizes.chatInput.minHeight,
                }}
                placeholder="Enter a message..."
                fullWidth
                value={currentMessageDraft}
                resize="none"
                rows={1}
                onChange={(e) => {
                  const message = e.target.value;

                  if (message.length != 0) {
                    checkMessageLength(message).then((ratio) =>
                      setMessageFillRatio(ratio),
                    );
                  } else {
                    setMessageFillRatio(0);
                  }

                  draftStore.setDraft(userReplyKey, message);
                  setCurrentMessageDraft(message);
                }}
              />
              <div
                style={{
                  position: "absolute",
                  bottom: size.xxs,
                  // These values are based off of the roundness of the parent containers border radius
                  left: "3px",
                  right: "3px",
                  height: size.xxs,
                  background: palette(
                    "message-sending-progress-bar-background",
                  ),
                }}
              >
                <div
                  style={{
                    width: `${Math.min(messageFillRatio * 100, 100)}%`,
                    height: "100%",
                    background:
                      messageFillRatio > 1
                        ? palette(
                            "message-sending-full-progress-bar-background",
                          )
                        : palette(
                            "message-sending-filling-progress-bar-background",
                          ),
                    transition:
                      "width 0.2s ease-out, background-color 0.2s ease-out",
                  }}
                />
              </div>
            </div>
            <EuiButton
              type="submit"
              style={{ height: "100%" }}
              disabled={!currentMessageDraft || messageFillRatio > 1}
              onClick={submitMessageForm}
            >
              Submit
            </EuiButton>
          </EuiFlexGroup>
        </EuiFlexItem>
      </EuiFlexGroup>

      {isMuteModalVisible &&
        ToggleMuteModal(
          currentUserStatus,
          userAutogeneratedName,
          closeMuteModal,
          handleUserStatusChange,
        )}

      {isEditModalVisible && (
        <EditUserModal
          setUserAlias={setDraftUserAlias}
          setUserDescription={setDraftUserDescription}
          userAutogeneratedName={userAutogeneratedName}
          closeModal={closeEditModal}
          handleFormSubmit={handleEditUserChange}
          draftUserAlias={draftUserAlias}
          userAlias={userAlias}
          draftUserDescription={draftUserDescription}
        />
      )}
    </>
  );
};
