import { ReactElement, useEffect, useState } from "react";

import {
  EuiPageTemplate,
  EuiPageTemplateProps,
  EuiGlobalToastList,
  useEuiTheme,
} from "@elastic/eui";
import { ChatsSideBar } from "./components/ChatsSideBar";
import { OpenVault } from "./views/OpenVault";
import { getVaultState } from "./commands/vaults";
import { VaultState } from "./model/bindings/VaultState";
import { Chat } from "./components/Chat";
import { Toast } from "@elastic/eui/src/components/toast/global_toast_list";
import { useErrorStore } from "./state/errors";
import { useMessageStore } from "./state/messages";
import { UserStatus } from "./model/bindings/UserStatus";
import { applyPalette, ColorMode } from "./styles/palette";

const App = ({
  panelled,
  bottomBorder = true,
  offset,
  grow,
}: {
  content?: ReactElement;
  sidebar?: ReactElement;
  panelled?: EuiPageTemplateProps["panelled"];
  bottomBorder?: EuiPageTemplateProps["bottomBorder"];
  // For fullscreen only
  offset?: EuiPageTemplateProps["offset"];
  grow?: EuiPageTemplateProps["grow"];
}) => {
  const { colorMode } = useEuiTheme();

  useEffect(() => {
    applyPalette(colorMode.toLowerCase() as ColorMode);
  }, [colorMode]);

  const [vaultState, setVaultState] = useState<VaultState | null>(null);
  const [currentUserReplyKey, setCurrentUserReplyKey] = useState<string | null>(
    null,
  );

  const errorsState = useErrorStore();

  const toasts = errorsState.errors.map((e) => ({
    id: e.id,
    title: "Error",
    color: "danger" as const,
    iconType: "warning",
    text: <p>{e.message}</p>,
  }));

  const messageStore = useMessageStore();

  const replyKeyDisplayNames = messageStore.messages.reduce(
    (acc, message) => {
      if (message.type === "userToJournalistMessage") {
        acc[message.from] = message.fromDisplayName;
      } else {
        acc[message.to] = message.toDisplayName;
      }
      return acc;
    },
    {} as Record<string, string>,
  );
  const userStatuses = messageStore.messages.reduce(
    (acc, message) => {
      if (message.type === "userToJournalistMessage") {
        acc[message.from] = message.userStatus;
      } else {
        acc[message.to] = message.userStatus;
      }
      return acc;
    },
    {} as Record<string, UserStatus>,
  );
  const userAliases = messageStore.messages.reduce(
    (acc, message) => {
      if (message.type === "userToJournalistMessage") {
        acc[message.from] = message.userAlias;
      } else {
        acc[message.to] = message.userAlias;
      }
      return acc;
    },
    {} as Record<string, string | null>,
  );
  const userDescriptions = messageStore.messages.reduce(
    (acc, message) => {
      if (message.type === "userToJournalistMessage") {
        acc[message.from] = message.userDescription;
      } else {
        acc[message.to] = message.userDescription;
      }
      return acc;
    },
    {} as Record<string, string | null>,
  );

  useEffect(() => {
    getVaultState().then((s) => {
      setVaultState(s);
    });
  }, []);

  return (
    <div>
      {vaultState === null ? (
        <OpenVault setVaultState={setVaultState} />
      ) : (
        <EuiPageTemplate
          panelled={panelled}
          bottomBorder={bottomBorder}
          grow={grow}
          offset={offset}
        >
          <EuiPageTemplate.Sidebar
            style={{
              position: "sticky",
              top: "0",
              height: "100vh",
              overflowY: "auto",
            }}
            minWidth={325}
          >
            <ChatsSideBar
              userAlias={vaultState.id}
              currentUserReplyKey={currentUserReplyKey}
              setChat={setCurrentUserReplyKey}
            />
          </EuiPageTemplate.Sidebar>
          {currentUserReplyKey ? (
            <Chat
              messages={messageStore.messages}
              userReplyKey={currentUserReplyKey}
              userAutogeneratedName={replyKeyDisplayNames[currentUserReplyKey]}
              setCurrentUserReplyKey={setCurrentUserReplyKey}
              currentUserStatus={userStatuses[currentUserReplyKey]}
              userAlias={userAliases[currentUserReplyKey]}
              userDescription={userDescriptions[currentUserReplyKey]}
            />
          ) : null}
        </EuiPageTemplate>
      )}

      <EuiGlobalToastList
        toasts={toasts}
        dismissToast={(t: Toast) => {
          errorsState.removeError(t.id);
        }}
        toastLifeTimeMs={6000}
      />
    </div>
  );
};

export default App;
